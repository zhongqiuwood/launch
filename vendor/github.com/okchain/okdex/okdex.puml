@startuml



okdexcli -> TendermintCore: 提交tx
TendermintCore -> TendermintCore: 或者从网络收到其他节点广播的tx


DexApp -> DexApp: ABCI: 初始化: 创建multistore \nfor application.db
TendermintCore -> DexApp: ABCI: CheckTx

DexApp -> DexApp: 简单检查: 校验签名，\n是否有足够fee

DexApp -> TendermintCore: ABCI: CheckTx Response

TendermintCore -> TendermintCore: 保存tx到mempool(交易池)
TendermintCore -> TendermintCore: 广播tx到网络


TendermintCore -> TendermintCore: gossip协议保证所有节点mempool基本相同

TendermintCore -> TendermintCore: BFT共识出块, persist blockstore.db

TendermintCore -> TendermintCore: 0. BlockExecutor.ApplyBlock
TendermintCore -> DexApp: 1.   ABCI: BeginBlock, 依次调用各个模块的 BeginBlock
TendermintCore <- DexApp: 1.1.      order BeginBlock，返回sdk.Tags
TendermintCore <- DexApp: 1.2.      token BeginBlock
TendermintCore <- DexApp: 1.3. ABCI: BeginBlock return all sdk.Tags

TendermintCore -> DexApp: 2.   ABCI: DeliverTx, 对BLOCK里的每个tx调用.\n persist application.db
TendermintCore <- DexApp: 2.1       处理币币交易tx,返回code告诉core该tx是否invalid
TendermintCore <- DexApp: 2.2       处理发币tx
TendermintCore <- DexApp: 2.3  ABCI: DeliverTx return sdk.Tags for indexing tx

TendermintCore -> DexApp: 3.   ABCI: EndBlock, 依次调用各个模块的 EndBlock
TendermintCore <- DexApp: 3.1.      order EndBlock，返回sdk.Tags
TendermintCore <- DexApp: 3.2.      token EndBlock
TendermintCore <- DexApp: 3.3. ABCI: EndBlock return:
TendermintCore <- DexApp: 3.3.       Validator Updates
TendermintCore <- DexApp: 3.3.       ConsensusParam Updates
TendermintCore <- DexApp: 3.3.       sdk.Tags of all modules

TendermintCore -> DexApp: 4.   ABCI: Commit
TendermintCore <- DexApp: 4.1. ABCI: Commit compute and return appHash(application.db merkleroot)

TendermintCore -> TendermintCore: 0.1 ApplyBlock. persist tx_index.db
TendermintCore -> TendermintCore: 0.2 ApplyBlock. persist evidence.db
TendermintCore -> TendermintCore: 0.3 ApplyBlock. persist state.db


@enduml